// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 파일 상단에 Role enum 추가
enum Role {
  admin
  semiAdmin
  teacher
  student
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String? // 이메일 회원가입 시 추가 부분
  credentials   Boolean   @default(false) // 이메일로 회원가입할 때만 True
  realName      String? // 추가 정보
  phone         String? // 추가 정보
  role          Role      @default(student) // 사용자 역할 추가
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CompletedSentence CompletedSentence[]
  QuizAttempt       QuizAttempt[]
  Recordings        Recordings[]
  Purchase          Purchase[]

  Course             Course[]
  Enrollment         Enrollment[]
  Submission         Submission[]
  UserNextDay        UserNextDay[]
  YouTubeViewAttempt YouTubeViewAttempt[]
  favoriteSentence   favoriteSentence[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?

  // Kakao 로그인에 필요한 부분.
  refresh_token_expires_in Int?

  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// 이메일 가입 시 인증코드
model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String
  expires DateTime

  createdAt DateTime @default(now())
}

// 비밀번호 변경 시에 생성된 링크
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String
  expires DateTime

  createdAt DateTime @default(now())
}

model unitSubject {
  id           String  @id @default(cuid())
  unitNumber   Int?
  subjectKo    String?
  subjectEn    String?
  unitUtubeUrl String?
}

model Sentence {
  id                 String               @id @default(cuid())
  no                 Int                  @unique // 문장 번호 (1~100)
  en                 String // 영어 문장
  ko                 String // 한국어 번역
  audioUrl           String? // MP3 파일 경로 추가
  utubeUrl           String?
  CompletedSentence  CompletedSentence[]
  QuizAttempt        QuizAttempt[]
  Recordings         Recordings[]
  YouTubeViewAttempt YouTubeViewAttempt[]
  favoriteSentence   favoriteSentence[]
}

/// 완료된 학습 문장 모델
model CompletedSentence {
  id          String   @id @default(cuid())
  userId      String
  userEmail   String?
  sentenceNo  Int
  completedAt DateTime @default(now()) // 학습 완료 날짜

  // 관계 설정
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentence Sentence @relation(fields: [sentenceNo], references: [no], onDelete: Cascade)

  @@unique([userId, sentenceNo]) // 한 문장은 한 번만 학습 완료 가능
}

model favoriteSentence {
  id          String   @id @default(cuid())
  userId      String
  sentenceNo  Int
  completedAt DateTime @default(now()) // 학습 완료 날짜

  // 관계 설정
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentence Sentence @relation(fields: [sentenceNo], references: [no], onDelete: Cascade)
}

/// 퀴즈 기록 모델
model QuizAttempt {
  id         String  @id @default(cuid())
  userId     String
  sentenceNo Int
  kind       String? // speaking or dictation
  attempt    Int?
  correct    Int?

  // 관계 설정
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentence Sentence @relation(fields: [sentenceNo], references: [no], onDelete: Cascade)
}

model Recordings {
  id           String   @id @default(cuid())
  userId       String
  sentenceNo   Int
  fileUrl      String
  attemptCount Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentence Sentence @relation(fields: [sentenceNo], references: [no], onDelete: Cascade)

  @@unique([userId, sentenceNo]) // 한 문장은 한 번만 등록 가능
}

// 유튜브 시청 시도 기록 모델
model YouTubeViewAttempt {
  id         String   @id @default(cuid())
  userId     String
  sentenceNo Int
  viewedAt   DateTime @default(now())
  duration   Int      @default(0) // 시청 시간(초)

  // 관계 설정
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentence Sentence @relation(fields: [sentenceNo], references: [no], onDelete: Cascade)

  @@index([userId, sentenceNo])
}

model UserNextDay {
  id             String  @id @default(cuid())
  userId         String
  userNextDay    Int
  totalCompleted Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// 구매 내역 모델
model Purchase {
  id        String    @id @default(cuid())
  userId    String // 구매자 ID
  paymentId String    @unique // 포트원 결제 ID
  orderName String
  amount    Int // 결제 금액
  createdAt DateTime  @default(now()) // 구매 시간
  expiresAt DateTime? // 구독 만료일 (null이면 영구)

  // 관계 설정
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// 강사(Teacher) 관련 prisma/schema.prisma 에 추가
model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계 설정
  teacher     User         @relation(fields: [teacherId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]
  assignments Assignment[]
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  content   String?
  courseId  String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계 설정
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id        String           @id @default(cuid())
  courseId  String
  studentId String
  status    EnrollmentStatus @default(active)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // 관계 설정
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student  User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([courseId, studentId])
}

enum EnrollmentStatus {
  pending
  active
  completed
  dropped
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String?
  courseId    String
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 관계 설정
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]
}

model Submission {
  id           String    @id @default(cuid())
  assignmentId String
  studentId    String
  content      String?
  fileUrl      String?
  grade        Float?
  feedback     String?
  submittedAt  DateTime  @default(now())
  gradedAt     DateTime?

  // 관계 설정
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Progress {
  id           String    @id @default(cuid())
  enrollmentId String
  lessonId     String?
  completed    Boolean   @default(false)
  lastAccessed DateTime?

  // 관계 설정
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
}
